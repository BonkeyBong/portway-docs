openapi: 3.0.2
info:
  version: 1.0.0
  title: Portway API
  contact:
    name: Portway Team
    email: feedback@bonkeybong.com
    url: https://getportway.com
  description: >
    The Portway API.


    # Introduction

    Learn how to use the Portway API. If you have any feedback or questions,

    please [contact us](mailto:feedback@bonkeybong.com).


    ## Quick Start


    ### Step 1. Choose or create a project

    The first step is to pick a project we can interact with via the Portway API. Either use an existing project or create a new one in the [Portway app](https://portway.app/d/projects).


    ### Step 2. Create a project token

    You'll need the project token to interact with the Portway API. Under the project settings from step 1, select "API Keys" and then click the "Add project key" button. Give the key any name, and for this example "Read" level access is sufficient.


    ### Step 3. Make an API request

    We'll use curl for these examples. Replace `<token>` with the token from step 2, and in the url replace `<id>` with the project id. You can find the project id by looking at the url of the project in the app.

    ```bash

    curl -H "Authorization: Bearer <token>" https://api.portway.app/api/v1/projects/<id>

    ```


    ### Step 4. View project documents

    Let's take a look at what documents we have in the project.  

    **Note:** Don't see any documents? Make sure you've published a document in your project. Or alternatively, add the `?draft=true` query parameter to the request url to get draft documents.


    Make sure to replace `<id>` with the project id again.

    ```bash

    curl -H "Authorization: Bearer <token>" https://api.portway.app/api/v1/projects/<id>/documents

    ```


    ### Step 5. View document fields

    Great, so now you've hopefully seen information about your document, but what about the content in the document? Portway documents consist of fields, so we'll need to get the document with its fields.


    Replace `<id>` with a document id from the previous step.

    ```bash

    curl -H "Authorization: Bearer <token>" https://api.portway.app/api/v1/documents/<id>

    ```


    And there it is! A document with fields populated.


    # Authentication

    The Portway API authenticates via bearer tokens in the Authorization header.


    There are two types of Portway tokens:

    1. User account tokens. These tokens grant access to everything the user can access. Therefore these tokens expire in 7 days.

    2. Project tokens. These tokens contain read, write, or admin permissions for a single project. These tokens can be generated in the app and they do not expire.


    **Example:**

    ```bash

    curl -H "Authorization: Bearer <TOKEN>" https://api.dev.portway.app/api/v1/projects

    ```
servers:
  - url: https://api.portway.app/api/v1
tags:
  - name: Projects
    description: Organization projects.
  - name: Documents
    description: Documents for a given project.
  - name: Fields
    description: Published or Unpublished fields. Use draft=true query param on GET requests to fetch unpublished fields.
  - name: Project Assignments
    description: Project assignments. Use includeUser=true query param on GET requests to include full user objects.
  - name: Project Tokens
    description: Project API access tokens
  - name: Organizations
    description: PRIVATE - GET/UPDATE an organization.
  - name: Billing
    description: PRIVATE - Billing information for an organization.
  - name: Users
    description: Portway users in your organization
  - name: User Assignments
    description: Project assignments for a specific user
  - name: project_model
    x-displayName: Project
    description: >
      <SchemaDefinition schemaRef="#/components/schemas/Project" />
  - name: document_model
    x-displayName: Document
    description: >
      <SchemaDefinition schemaRef="#/components/schemas/Document" />
  - name: field_model
    x-displayName: Field
    description: >
      <SchemaDefinition schemaRef="#/components/schemas/Field" />
x-tagGroups:
  - name: Projects
    tags:
      - Projects
      - Project Tokens
      - Project Assignments
  - name: Documents
    tags:
      - Documents
      - Fields
  - name: Users
    tags:
      - Users
      - User Assignments
  - name: Models
    tags:
      - project_model
      - document_model
      - field_model
paths:
  /projects:
    get:
      description: >
        Returns all projects that the user has access to
      operationId: findProjects
      tags:
        - Projects
      responses:
        "200":
          description: projects response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: definitions/project.yml#/Project
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new project
      operationId: addProject
      tags:
        - Projects
      requestBody:
        description: Project to add
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/project.yml#/NewProject
      responses:
        "201":
          description: project response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/project.yml#/Project
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/projects/{projectId}":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Returns a project based on a single ID
      operationId: findProjectById
      tags:
        - Projects
      parameters:
        - name: projectId
          in: path
          description: ID of project to fetch
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: project response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/project.yml#/Project
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Update a project based on a single ID - full or partial update
      operationId: updateProject
      tags:
        - Projects
      parameters:
        - name: projectId
          in: path
          description: ID of project to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Project body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/project.yml#/UpdateProject
      responses:
        "200":
          description: project response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/project.yml#/Project
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: deletes a single project based on the ID supplied
      operationId: deleteProject
      tags:
        - Projects
      parameters:
        - name: projectId
          in: path
          description: ID of project to delete
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: project deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/projects/{projectId}/export":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Returns a url to an archived copy of the project
      operationId: exportProjectById
      tags:
        - Projects
      parameters:
        - name: projectId
          in: path
          description: ID of project to export
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: project response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      url:
                        type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/projects/{projectId}/documents":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Returns all documents that the user has access to for the given project id
      operationId: findProjectDocuments
      tags:
        - Documents
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: draft
          in: query
          description: option to include draft documents
          schema:
            type: boolean
      responses:
        "200":
          description: documents response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./definitions/document.yml#/Document
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Creates a new document
      operationId: addProjectDocument
      tags:
        - Documents
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
      requestBody:
        description: document to add
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/document.yml#/NewDocument
      responses:
        "201":
          description: document response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/document.yml#/Document
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/projects/{projectId}/documents/{documentId}":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Returns a document based on a single ID
      operationId: findProjectDocumentById
      tags:
        - Documents
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: documentId
          in: path
          description: ID of document to fetch
          required: true
          schema:
            type: integer
        - name: draft
          in: query
          description: option to include draft documents
          schema:
            type: boolean
      responses:
        "200":
          description: document response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/document.yml#/Document
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Update a document based on a single ID - full or partial update
      operationId: updateDocument
      tags:
        - Documents
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: documentId
          in: path
          description: ID of document to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Document body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/document.yml#/UpdateDocument
      responses:
        "200":
          description: document response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/document.yml#/Document
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: deletes a single document based on the ID supplied
      operationId: deleteDocument
      tags:
        - Documents
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: documentId
          in: path
          description: ID of project to delete
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: document deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/projects/{projectId}/assignments":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: >
        Returns all project user assignments
      operationId: findProjectUsers
      tags:
        - Project Assignments
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: includeUser
          in: query
          description: setting to true with include user objects in request
          schema:
            type: boolean
      responses:
        "200":
          description: project user assignments response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./definitions/projectUser.yml#/ProjectUser
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Creates a new project user assignment
      operationId: addProjectUser
      tags:
        - Project Assignments
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
      requestBody:
        description: project user to add
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/projectUser.yml#/NewProjectUser
      responses:
        "201":
          description: project user assignment response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/projectUser.yml#/ProjectUser
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/projects/{projectId}/assignments/{assignmentId}":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Returns a project user assignment based on a single ID
      operationId: findProjectUserById
      tags:
        - Project Assignments
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: assignmentId
          in: path
          description: ID of project user assignment to fetch
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: project user assignment response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/projectUser.yml#/ProjectUser
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: Update a project user assignment based on a single ID
      operationId: updateProjectUser
      tags:
        - Project Assignments
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: assignmentId
          in: path
          description: ID of assignment to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Project User assignment body to update
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/projectUser.yml#/UpdateProjectUser
      responses:
        "200":
          description: project user assignment response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/projectUser.yml#/ProjectUser
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: deletes a single project user assignment based on the ID supplied
      operationId: deleteProjectUser
      tags:
        - Project Assignments
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: assignmentId
          in: path
          description: ID of project user assignment to delete
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: project user assignment deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/projects/{projectId}/tokens":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: >
        Returns all project tokens
      operationId: findProjectTokens
      tags:
        - Project Tokens
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: project tokens response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./definitions/projectToken.yml#/ProjectToken
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Creates a new project token
      operationId: addProjectToken
      tags:
        - Project Tokens
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
      requestBody:
        description: project token to add
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/projectToken.yml#/NewProjectToken
      responses:
        "201":
          description: project token response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/projectToken.yml#/ProjectToken
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/projects/{projectId}/tokens/{tokenId}":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Returns a project token based on a single ID
      operationId: findProjectTokenById
      tags:
        - Project Tokens
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: tokenId
          in: path
          description: ID of project token to fetch
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: project token response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/projectToken.yml#/ProjectToken
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Update a project token based on a single ID
      operationId: updateProjectToken
      tags:
        - Project Tokens
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: tokenId
          in: path
          description: ID of token to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Project token body to update
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/projectToken.yml#/UpdateProjectToken
      responses:
        "200":
          description: project token response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/projectToken.yml#/ProjectToken
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: deletes a single project token based on the ID supplied
      operationId: deleteProjectToken
      tags:
        - Project Tokens
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: tokenId
          in: path
          description: ID of project token to delete
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: project token deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/documents/{documentId}":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Returns a document based on a single ID with all document fields populated
      operationId: findPopulatedDocumentById
      tags:
        - Documents
      parameters:
        - name: documentId
          in: path
          description: ID of document to fetch
          required: true
          schema:
            type: integer
        - name: draft
          in: query
          description: option to include draft documents
          schema:
            type: boolean
      responses:
        "200":
          description: document response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/document.yml#/PopulatedDocument
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/documents/{documentId}/publish":
    post:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Publishes a document based on ID
      operationId: publishDocument
      tags:
        - Documents
      parameters:
        - name: documentId
          in: path
          description: ID of document to publish
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: document published
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/documents/{documentId}/unpublish":
    post:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Unpublishes a document based on ID
      operationId: unpublishDocument
      tags:
        - Documents
      parameters:
        - name: documentId
          in: path
          description: ID of document to unpublish
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: document unpublished
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/documents/{documentId}/fields":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: >
        Returns all fields that the user has access to for the given project/document ids
      operationId: findFields
      tags:
        - Fields
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: draft
          in: query
          description: option to include draft documents
          schema:
            type: boolean
      responses:
        "200":
          description: fields response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./definitions/field.yml#/Field
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Creates a new field
      operationId: addField
      tags:
        - Fields
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
      requestBody:
        description: field to add
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/field.yml#/NewField
            example:
              name: field name
              value: 808
              type: 3
      responses:
        "201":
          description: field response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/field.yml#/Field
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/documents/{documentId}/fields/{fieldId}":
    get:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Returns a field based on a single ID
      operationId: findFieldById
      tags:
        - Fields
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: fieldId
          in: path
          description: ID of field to fetch
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: field response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/field.yml#/Field
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Update a field based on a single ID - full or partial update
      operationId: updateField
      tags:
        - Fields
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: fieldId
          in: path
          description: ID of field to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Field body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/field.yml#/UpdateField
            example:
              name: new name
              value: new value
      responses:
        "200":
          description: field response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/field.yml#/Field
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: deletes a single field based on the ID supplied
      operationId: deleteField
      tags:
        - Fields
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: fieldId
          in: path
          description: ID of field to delete
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: field deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/documents/{documentId}/fields/{fieldId}/order":
    put:
      security:
        - projectJWT: []
        - bearerJWT: []
      description: Update field order based on a field ID
      operationId: updateFieldOrder
      tags:
        - Fields
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: fieldId
          in: path
          description: ID of field to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Field body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/field.yml#/FieldOrder
      responses:
        "204":
          description: field order updated
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/organizations/{organizationId}": {}
  "/organizations/{organizationId}/avatar": {}
  "/organizations/{organizationId}/billing": {}
  "/organizations/{organizationId}/billing/cancel": {}
  "/organizations/{organizationId}/plan": {}
  "/organizations/{organizationId}/seats": {}
  /users:
    get:
      description: Returns all users that the user has access to
      operationId: findUsers
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: the page of results to return
          schema:
            type: integer
        - name: perPage
          in: query
          description: number of users to return per page
          schema:
            type: integer
        - name: nameSearch
          in: query
          description: search by user name (partial matching)
          schema:
            type: string
        - name: sortBy
          in: query
          description: what user value to look at when sorting results
          schema:
            type: string
            enum:
              - name
              - createdAt
        - name: sortMethod
          in: query
          description: whether to return ascending or descending sort results (default is ascending)
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: ids
          in: query
          description: batch ids of users to return
          schema:
            type: array
            items:
              type: number
      responses:
        "200":
          description: users response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: definitions/user.yml#/User
                  page:
                    type: integer
                    example: 1
                  perPage:
                    type: integer
                    example: 1
                  total:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 1
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new user
      operationId: addUser
      tags:
        - Users
      requestBody:
        description: User to add
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/user.yml#/NewUser
      responses:
        "201":
          description: user response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/user.yml#/User
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/users/{userId}":
    get:
      description: Returns a user based on a single ID
      operationId: findUserById
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: user response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/user.yml#/User
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: Update a user based on a single ID - full or partial update
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
      requestBody:
        description: User body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/user.yml#/UpdateUser
      responses:
        "200":
          description: user response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./definitions/user.yml#/User
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: user deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/users/{userId}/orgrole":
    put:
      description: Update a user's organization role based on a single ID
      operationId: updateUserOrgRole
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
      requestBody:
        description: User organization role body
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions/user.yml#/UpdateUserOrgRole
      responses:
        "204":
          description: user org role response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/users/{userId}/assignments":
    get:
      description: Returns user assignments based on user id
      operationId: findUserAssignmentsById
      tags:
        - User Assignments
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: user assignments response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./definitions/projectUser.yml#/ProjectUser
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/users/{userId}/projects":
    get:
      description: Returns projects based on user id
      operationId: findUserProjectsById
      tags:
        - User Assignments
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: user projects response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./definitions/project.yml#/Project
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
    projectJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Document:
      $ref: ./definitions/document.yml#/Document
    Project:
      $ref: ./definitions/project.yml#/Project
    Field:
      $ref: ./definitions/field.yml#/Field
    Error:
      required:
        - code
        - message
      properties:
        error:
          type: string
        errorType:
          type: string
          description: Optional error type
          enum:
            - undefined
            - ValidationError
            - FieldValueIncorrectTypeError
        errorDetails:
          type: array
          items:
            $ref: "#/components/schemas/ErrorDetail"
    ErrorDetail:
      properties:
        message:
          type: string
        key:
          type: string
security:
  - bearerJWT: []
